import { useState, useEffect, useRef } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { FaSpinner, FaDownload, FaRobot } from 'react-icons/fa'
import { useUserData } from '../context/UserDataContext'
import { generateInsights } from '../utils/geminiApi'
import { generatePDF } from '../utils/pdfGenerator'

function AIInsights() {
  const { userData: leetcodeData, codingDuration } = useUserData()
  const [insights, setInsights] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const navigate = useNavigate()
  const location = useLocation()
  const insightsRef = useRef(null)
  
  useEffect(() => {
    const fetchInsights = async () => {
      setIsLoading(true)
      try {
        let response
        
        if (location.state?.platform === 'codeforces') {
          response = await generateInsights({
            type: 'codeforces',
            data: location.state.userData
          })
        } else if (location.state?.platform === 'github') {
          response = await generateInsights({
            type: 'github',
            data: location.state.userData
          })
        } else if (leetcodeData) {
          response = await generateInsights({
            type: 'leetcode',
            data: leetcodeData,
            codingDuration
          })
        } else {
          navigate('/stats')
          return
        }
        
        setInsights(response)
      } catch (err) {
        setError('Failed to generate insights. Please try again later.')
        console.error(err)
      } finally {
        setIsLoading(false)
      }
    }
    
    fetchInsights()
  }, [leetcodeData, navigate, codingDuration, location.state])
  
  const handleDownloadPDF = async () => {
    if (!insightsRef.current) return
    
    const platform = location.state?.platform || 'leetcode'
    const username = location.state?.userData?.login || leetcodeData?.username || 'user'
    const filename = `${platform}-insights-${username}.pdf`
    
    const success = await generatePDF(insightsRef.current, filename)
    if (success) {
      alert('PDF downloaded successfully!')
    } else {
      alert('Failed to generate PDF. Please try again.')
    }
  }

  return (
    <div className="pt-24 pb-16">
      <div className="container-custom mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">AI-Powered Insights</h1>
          
          {insights && !isLoading && (
            <button 
              onClick={handleDownloadPDF}
              className="btn btn-secondary flex items-center"
            >
              <FaDownload className="mr-2" /> Download PDF
            </button>
          )}
        </div>
        
        {isLoading ? (
          <div className="flex flex-col items-center justify-center py-20">
            <FaSpinner className="text-primary-500 text-4xl animate-spin mb-4" />
            <p className="text-gray-600">Our AI is analyzing your performance...</p>
          </div>
        ) : error ? (
          <div className="card bg-error-500 bg-opacity-10 border border-error-500">
            <h3 className="text-xl font-semibold mb-3 text-error-500">Error</h3>
            <p className="text-gray-700">{error}</p>
          </div>
        ) : (
          <div className="card bg-white" ref={insightsRef}>
            <div className="flex items-center mb-6">
              <div className="bg-primary-100 text-primary-600 w-12 h-12 rounded-full flex items-center justify-center mr-4 text-2xl">
                <FaRobot />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gray-800">Personalized Analysis</h2>
                <p className="text-gray-600">Based on your performance and preferences</p>
              </div>
            </div>
            
            <div className="prose max-w-none text-gray-700 whitespace-pre-wrap">
              {insights.split('\n').map((line, index) => {
                if (line.trim().match(/^[A-Z\s]+$/)) {
                  return (
                    <h3 key={index} className="text-lg font-bold text-gray-800 mt-6 mb-3">
                      {line.trim()}
                    </h3>
                  )
                }
                return <p key={index} className="mb-2">{line.trim()}</p>
              })}
            </div>
            
            <div className="mt-8 pt-4 border-t border-gray-200">
              <p className="text-sm text-gray-500">
                These insights are generated by AI based on your statistics. Use them as guidance for your learning journey.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default AIInsights